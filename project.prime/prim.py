# coding: utf-8 
import random
num = '285542542228279613901563566102164008326164238644702889199247456602284400390600653875954571505539843239754513915896150297878399377056071435169747221107988791198200988477531339214282772016059009904586686254989084815735422480409022344297588352526004383890632616124076317387416881148592486188361873904175783145696016919574390765598280188599035578448591077683677175520434074287726578006266759615970759521327828555662781678385691581844436444812511562428136742490459363212810180276096088111401003377570363545725120924073646921576797146199387619296560302680261790118132925012323046444438622308877924609373773012481681672424493674474488537770155783006880852648161513067144814790288366664062257274665275787127374649231096375001170901890786263324619578795731425693805073056119677580338084333381987500902968831935913095269821311141322393356490178488728982288156282600813831296143663845945431144043753821542871277745606447858564159213328443580206422714694913091762716447041689678070096773590429808909616750452927258000843500344831628297089902728649981994387647234574276263729694848304750917174186181130688518792748622612293341368928056634384466646326572476167275660839105650528975713899320211121495795311427946254553305387067821067601768750977866100460014602138408448021225053689054793742003095722096732954750721718115531871310231057902608580607'

def probablyPrime(num, k):
    """Using Miller-Rabin primality test"""
    if num == 2 or num == 3:
        return True
    if num < 2:
        return False
    if not num & 1:
        return False

    # find s and d such that nâˆ’1 = (2**s)*d with d odd
    d = (num-1) >> 1
    s = 1
    while not (d & 1):
        d = d >> 1
        s += 1

    # run k times
    for _ in range(k):
        a = random.randint(2, num-2)
        x = pow(a, d, num)  # more efficient than  x = a**d % num
        if not (x == 1 or x == num-1):
            for _ in range(s-1):
                x = (x**2) % num
                if x == 1:
                    return False
                if x == num-1:
                    break
            if not x == num-1:
                return False
    return True


def largestPrime(num):
    num_list = set([])
    for i in range(0,len(num)+1):
        for j in range(i+1,len(num)+1): 
            inum = int(num[i:j])
            # Don't append numbers that have already appeared
            if inum not in num_list:
                num_list.add(inum)

    # Convert to list and sort
    num_list = list(num_list)
    num_list.sort(reverse=True)

    for num in num_list:
        print('Checking ' + str(num))
        if probablyPrime(num,100):
            print('\n' + str(num) + ' is probably the largest prime!')
            return

largestPrime(num)